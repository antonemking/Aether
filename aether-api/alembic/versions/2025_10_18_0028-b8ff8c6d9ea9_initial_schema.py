"""Initial schema

Revision ID: b8ff8c6d9ea9
Revises: 
Create Date: 2025-10-18 00:28:42.993859

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b8ff8c6d9ea9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('plan', sa.Enum('FREE', 'PRO', 'TEAM', 'ENTERPRISE', name='plantype'), nullable=False),
    sa.Column('api_key', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organizations_api_key'), 'organizations', ['api_key'], unique=True)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('environment', sa.Enum('DEVELOPMENT', 'STAGING', 'PRODUCTION', name='environmenttype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('alerts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('alert_type', sa.Enum('QUALITY_DROP', 'COST_SPIKE', 'HALLUCINATION', 'HIGH_LATENCY', 'ERROR_RATE', name='alerttype'), nullable=False),
    sa.Column('severity', sa.Enum('INFO', 'WARNING', 'CRITICAL', name='severity'), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('alert_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rag_traces',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('query', sa.Text(), nullable=False),
    sa.Column('response', sa.Text(), nullable=False),
    sa.Column('contexts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('trace_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('cost_usd', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_created_at', 'rag_traces', ['created_at'], unique=False)
    op.create_index('idx_project_created', 'rag_traces', ['project_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_rag_traces_created_at'), 'rag_traces', ['created_at'], unique=False)
    op.create_table('evaluations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('trace_id', sa.UUID(), nullable=False),
    sa.Column('context_precision', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('context_recall', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('answer_relevancy', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('faithfulness', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('hallucination_detected', sa.Boolean(), nullable=True),
    sa.Column('toxicity_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('pii_detected', sa.Boolean(), nullable=True),
    sa.Column('token_overlap_ratio', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('answer_length', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('evaluation_cost_usd', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('evaluated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['trace_id'], ['rag_traces.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trace_id')
    )
    op.create_index('idx_trace', 'evaluations', ['trace_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_trace', table_name='evaluations')
    op.drop_table('evaluations')
    op.drop_index(op.f('ix_rag_traces_created_at'), table_name='rag_traces')
    op.drop_index('idx_project_created', table_name='rag_traces')
    op.drop_index('idx_created_at', table_name='rag_traces')
    op.drop_table('rag_traces')
    op.drop_table('alerts')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('projects')
    op.drop_index(op.f('ix_organizations_api_key'), table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###
